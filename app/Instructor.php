<?php

namespace App;

use App\helper\Constants;
use App\helper\ImageUploader;
use App\helper\MathParser\Math;
use App\helper\PaymentModelHelper;
use App\QueryFilter\SearchBy;
use App\QueryFilter\Sort;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Pipeline\Pipeline;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;


class Instructor extends ImageUploader
{
    protected $hidden = array('pivot');

    protected $guarded = [];

    public static function allInstructors($center)
    {
        return App(Pipeline::class)
            ->send($center->instructors())
            ->through([
                SearchBy::class,
                Sort::class

            ])
            ->thenReturn()
            ->get();
    }

    public function getImage($key)
    {
        $imagePath = ($this->$key) ? $this->$key : Constants::getInstructorPlaceholderImage();
        return $imagePath;
    }



    public function centers(){
        return $this->belongsToMany(Center::class);
    }

    public function courses()
    {
        return $this->belongsToMany(Course::class);
    }

    public function diplomaGroups()
    {
        return $this->hasMany(DiplomaGroup::class);
    }

    public function busyTimes()
    {
        $groups = $this->diplomaGroups;
        $busyTimes = [];
        foreach ($groups as $group){
            foreach ($group->times as $time){
                $busyTimes[] = $time;
            }
        }
        return collect($busyTimes);
    }

    public function address()
    {
        return $this->morphOne(Address::class,'addressable');
    }

    // save image before center it to db
    public function setImageAttribute($image){
        $this->deleteImage($this->image);
        $original = $this->saveImage($image);
        return $this->attributes['image'] = url($this->getDir()."/".$original);

    }
    public function setIdImageAttribute($idImage){
        $this->deleteImage($this->idImage);
        $original = $this->saveImage($idImage);
        return $this->attributes['idImage'] = url($this->getDir()."/".$original);

    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($instructor){

            // detach the student from all centers
            foreach ($instructor->centers as $center){
                $center->instructors()->detach($instructor);
            }
            // delete student's address
            if($instructor->address) $instructor->address->delete();
            // delete student's image and id_image from /uploads/profiles
            if($instructor->image) (new self)->deleteImage($instructor->image);
            if($instructor->idImage) (new self)->deleteImage($instructor->idImage);

        });
    }

    public function paymentModel()
    {
        return $this->belongsTo(PaymentModel::class);
    }


    public function setPaymentModelMetaDataAttribute($meta_data)
    {
        return $this->attributes['payment_model_meta_data'] = json_encode($meta_data,JSON_UNESCAPED_UNICODE );
    }


    public function getPaymentModelAttribute($paymentModel)
    {
        return PaymentModelHelper::getPaymentModelAttribute($paymentModel,
            json_decode($this->payment_model_meta_data, true));
    }



    public static function ApiFields(){
        return ['instructors.id','nameAr','nameEn','image','bio'];
    }


    public function getDir()
    {
        return '/uploads/profiles';
    }


}
