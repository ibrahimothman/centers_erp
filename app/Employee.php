<?php

namespace App;

use App\helper\Constants;
use App\helper\ImageUploader;
use App\helper\mathParser\Math;
use App\helper\PaymentModelHelper;
use App\QueryFilter\SearchBy;
use App\QueryFilter\Sort;
use App\Rules\UniquePerCenter;
use http\Client\Request;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Pipeline\Pipeline;
use function foo\func;

class Employee extends ImageUploader
{
    //
    protected $guarded = [];
    protected $appends = ['last_rest'];


    public static function allEmployees($center)
    {
        return App(Pipeline::class)
            ->send($center->employees())
            ->through([
                SearchBy::class,
                Sort::class
            ])
            ->thenReturn()
            ->get();
    }

    public function setImageAttribute($image){
        if ($image) {
            $this->deleteImage($this->image);
            $original = $this->saveImage($image);
            return $this->attributes['image'] = url($this->getDir() . "/" . $original);
        }

    }
    public function setIdImageAttribute($idImage){
        if($idImage) {
            // first delete prev one
            $this->deleteImage($this->idImage);
            $original = $this->saveImage($idImage);
            return $this->attributes['idImage'] = url($this->getDir() . "/" . $original);
        }

    }

    // employee could be an user
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    public function address()
    {
        return $this->morphOne(Address::class,'addressable');
    }

    public function center()
    {
        return $this->belongsTo(Center::class);
    }


    public function job()
    {
        return $this->belongsTo(Job::class);
    }

    public function paymentModel()
    {
        return $this->belongsTo(PaymentModel::class, 'payment_model');
    }

    public function setPaymentModelMetaDataAttribute($meta_data)
    {
        return $this->attributes['payment_model_meta_data'] = json_encode($meta_data,JSON_UNESCAPED_UNICODE );
    }



    public function getPaymentModelAttribute($paymentModel)
    {

       return PaymentModelHelper::getPaymentModelAttribute($paymentModel,
           json_decode($this->payment_model_meta_data, true));

    }

    // get last rest for the employee
    public function getLastRestAttribute()
    {
        $center = Center::findOrFail(Session('center_id'));
        $rest = $center->transactions()->where("meta_data->payFor_type", "App\Employee")
            ->where("meta_data->payFor_id", "$this->id")->latest()->first()['rest'];
        return $this['rest'] = $rest;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function($employee){
            $employee->address->delete();
            if($employee->user) $employee->user->delete();
            if($employee->image) (new self)->deleteImage($employee->image);
            if($employee->idImage) (new self)->deleteImage($employee->idImage);
        });
    }

    public static function rules(\Illuminate\Http\Request $request)
    {
        if($request->isMethod('post')){
            return[
                'idNumber' => ['required', 'digits:14',  new UniquePerCenter(Employee::class, '')],
                'image' => ' sometimes |nullable|image|file | max:10000',
                'idImage' => 'sometimes |nullable|image|file | max:10000',
                'phoneNumber' => ['required', 'regex:/(01)[0-9]{9}/',new UniquePerCenter(Employee::class, '')],
//            'phoneNumberSec' => 'nullable|regex:/(01)[0-9]{9}/',
                'passportNumber' => ['sometimes', new UniquePerCenter(Employee::class, '')],
                'state' => 'required',
                'city' => 'required',
                'address' => 'required',
                'payment_model' => ['required', 'integer'],
                'payment_model_meta_data' => ['required', 'array'],
                'nameAr' => ['required', new UniquePerCenter(Employee::class, '')],
                'nameEn' => ['required', new UniquePerCenter(Employee::class, '')],
                'email' => ['nullable', 'email', new UniquePerCenter(Employee::class, '')],
                'job' => 'sometimes',
                'send_invitation' => 'sometimes'
            ];
        }else{
            $employee_id = $request->route('employee')->id;
            return[
                'idNumber' => ['required', 'digits:14',  new UniquePerCenter(Employee::class, $employee_id)],
                 'image' => ' sometimes |nullable|image|file | max:10000',
                'idImage' => 'sometimes |nullable|image|file | max:10000',
                'phoneNumber' => ['required', 'regex:/(01)[0-9]{9}/',new UniquePerCenter(Employee::class, $employee_id)],
//            'phoneNumberSec' => 'nullable|regex:/(01)[0-9]{9}/',
                'passportNumber' => ['sometimes', new UniquePerCenter(Employee::class, $employee_id)],
                'state' => 'required',
                'city' => 'required',
                'address' => 'required',
                'payment_model' => ['required', 'integer'],
                'payment_model_meta_data' => ['required', 'array'],
                'nameAr' => ['required', new UniquePerCenter(Employee::class, $employee_id)],
                'nameEn' => ['required', new UniquePerCenter(Employee::class, $employee_id)],
                'email' => ['nullable', 'email', new UniquePerCenter(Employee::class, $employee_id)],
                'job' => 'sometimes',
                'send_invitation' => 'sometimes'
            ];

        }
    }

    public function getImage($key)
    {
        $imagePath = ($this->$key) ? $this->$key : Constants::getInstructorPlaceholderImage();
        return  $imagePath;
    }

    public function getDir()
    {
        // TODO: Implement getDir() method.
        return 'uploads/profiles';
    }
}
